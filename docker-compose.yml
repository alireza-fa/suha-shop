version: "3"

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    networks:
      - main
    restart: always

  memcached:
    container_name: memcached
    image: memcached:latest
    networks:
      - main
    depends_on:
      - postgres
    restart: always

  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      - POSTGRES_DB=shop
      - POSTGRES_USER=shop
      - POSTGRES_PASSWORD=shop
    networks:
      - main
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data

  celery_worker:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: django_celery_example_celery_worker
    command: "celery -A A worker -l INFO"
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq
      - postgres
    environment:
      - BROKER_URL=amqp://rabbitmq
      - RESULT_BACKEND=rpc://
      - C_FORCE_ROOT=true
    networks:
      - main
    restart: always

  celery_beat:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: django_celery_example_celery_beat
    command: 'celery -A A beat -l info -S django'
    volumes:
      - .:/app
    depends_on:
      - app
      - rabbitmq
      - postgres
    networks:
      - main
    restart: always

  app:
    build: .
    command: "gunicorn A.wsgi -b 0.0.0.0:8000"
    container_name: app
    volumes:
      - .:/code/
      - static_volume:/code/static
    depends_on:
      - postgres
      - rabbitmq
      - memcached
    expose:
      - "8000"
    networks:
      - main
      - nginx_network
    restart: always

  nginx:
    container_name: nginx
    command: nginx -g 'daemon off;'
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - static_volume:/code/static
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - nginx_network
    restart: always

volumes:
  postgres_data:
    external: true
  static_volume:
    external: true
networks:
  main:
    external: true
  nginx_network:
    external: true
